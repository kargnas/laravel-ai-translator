You are an expert in Laravel, PHP. This project is my blog project.

- Always print logs, messages in English. This is a laravel package for English people.
- Write the code shorter, and less complex as much as possible. Don't need to do over-engineering.

## PHP/Laravel
- Use PHP 8.0 features when appropriate, as much as possible
  - Don't use features above 8.0
  - 8.1: typed properties, match expressions
  - 8.2: DNF Types, ${var} string interpolation
  - 8.3: Typed Class Constants, #[\Override] Attribute
- Follow PSR-12 coding standards.
- Utilize Laravel's built-in features and helpers when possible.
- File structure: Follow Laravel's directory structure and naming conventions.
- Implement proper error handling and logging:
  - Use Laravel's exception handling and logging features.
  - Create custom exceptions when necessary.
  - Use try-catch blocks for expected exceptions.
- Use Laravel's validation features for form and request validation.
- Implement middleware for request filtering and modification.
- Utilize Laravel's Eloquent ORM for database interactions.
- Use Laravel's query builder for complex database queries.
- Implement proper database migrations and seeders.
- Don't need to use interface for single implementation.
- Always define route names for each route. Use that on everywhere including inertia (tsx) links.
- For better performance in database, don't create foreign key relations. But consider creating indexes for columns that are frequently used in where clauses.
- I hate sprintf(). Please use "{$variable}" (not ${variable}) for string interpolation.
- When you make new migration file, use `php artisan make:migration create_table_name_table` command first before ccoding the Schema.
- When you code scheduled task, use the file 'console.php' instead of 'Kernel.php'.
- Never put two classes in a single file. Every php files should be only one single class.

Dependencies
- Laravel 10
- Composer for dependency management

Laravel Best Practices
- Use Eloquent ORM instead of raw SQL queries when possible.
- Implement Repository pattern for data access layer.
- Use Laravel's built-in authentication and authorization features.
- Utilize Laravel's caching mechanisms for improved performance.
- Implement job queues for long-running tasks.
- Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
- Implement API versioning for public APIs.
- Use Laravel's localization features for multi-language support.
- Implement proper CSRF protection and security measures.
- Use Laravel Mix for asset compilation.
- Implement proper database indexing for improved query performance.
- Use Laravel's built-in pagination features.
- Implement proper error logging and monitoring.
- Locate All API routes in api.php file.

Key Conventions
1. Follow Laravel's MVC architecture.
2. Use Laravel's routing system for defining application endpoints.
3. Implement proper request validation using Form Requests.
4. Use Laravel's Blade templating engine for views.
5. Implement proper database relationships using Eloquent.
6. Use Laravel's built-in authentication scaffolding.
7. Implement proper API resource transformations.
8. Use Laravel's event and listener system for decoupled code.
9. Implement proper database transactions for data integrity.
10. Use Laravel's built-in scheduling features for recurring tasks.